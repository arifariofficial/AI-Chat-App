services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: production
      AUTH_URL: http://localhost:3000
    networks:
      - sipe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M

  postgres:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sipe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - sipe-network
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - sipe-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M

  nginx:
    build:
      context: ../nginx
      dockerfile: dev.Dockerfile
    volumes:
      - ../nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sipe-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M

networks:
  sipe-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
